// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String
  password     String
  role         Role         @default(USER)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  tasks        Task[]
  clients      Client[]
  expenses     Expense[]
  appointments Appointment[]
  documents    Document[]
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  priority    Priority @default(MEDIUM)
  status      Status   @default(PENDING)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Client {
  id          String      @id @default(cuid())
  name        String
  email       String
  phone       String
  type        ClientType
  status      ClientStatus @default(ACTIVE)
  properties  String      // Stored as comma-separated values
  lastContact DateTime
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Appointment {
  id        String         @id @default(cuid())
  title     String
  client    String
  date      DateTime
  time      String
  location  String
  type      AppointmentType
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Document {
  id        String        @id @default(cuid())
  title     String
  client    String
  property  String
  type      DocumentType
  status    DocumentStatus @default(PENDING)
  date      DateTime
  size      String
  url       String
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Expense {
  id        String        @id @default(cuid())
  title     String
  amount    Float
  category  ExpenseCategory
  property  String?
  date      DateTime
  status    ExpenseStatus @default(PENDING)
  receipt   String?
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum ClientType {
  BUYER
  SELLER
  BOTH
}

enum ClientStatus {
  ACTIVE
  INACTIVE
}

enum AppointmentType {
  VIEWING
  MEETING
  SIGNING
  INSPECTION
}

enum DocumentType {
  CONTRACT
  REPORT
  INSPECTION
  MARKET_ANALYSIS
}

enum DocumentStatus {
  PENDING
  REVIEWED
  SIGNED
  DRAFT
}

enum ExpenseCategory {
  MARKETING
  OFFICE
  MAINTENANCE
  TRAVEL
  OTHER
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REIMBURSED
}
